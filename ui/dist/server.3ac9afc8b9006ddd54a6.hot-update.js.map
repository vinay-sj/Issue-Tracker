{"version":3,"sources":["webpack:///./src/IssueReport.jsx"],"names":["statuses","IssueReport","React","Component","fetchData","match","search","showError","vars","params","get","status","effortMin","parseInt","Number","isNaN","effortMax","query","data","_graphQLFetch","constructor","props","stats","store","initialData","issueCounts","state","componentDidMount"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA,MAAMA,QAAQ,GAAG,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,QAA7B,CAAjB;;AAEA,MAAMC,WAAN,SAA0BC,4CAAK,CAACC,SAAhC,CAA0C;AACxC,eAAcC,SAAd,CAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,SAAvC,EAAkD;AAChD,UAAMC,IAAI,GAAG,EAAb;AACA,QAAIC,MAAM,CAACC,GAAP,CAAW,QAAX,CAAJ,EAA0BF,IAAI,CAACG,MAAL,GAAcF,MAAM,CAACC,GAAP,CAAW,QAAX,CAAd;AAE1B,UAAME,SAAS,GAAGC,QAAQ,CAACJ,MAAM,CAACC,GAAP,CAAW,WAAX,CAAD,EAA0B,EAA1B,CAA1B;AACA,QAAI,CAACI,MAAM,CAACC,KAAP,CAAaH,SAAb,CAAL,EAA8BJ,IAAI,CAACI,SAAL,GAAiBA,SAAjB;AAC9B,UAAMI,SAAS,GAAGH,QAAQ,CAACJ,MAAM,CAACC,GAAP,CAAW,WAAX,CAAD,EAA0B,EAA1B,CAA1B;AACA,QAAI,CAACI,MAAM,CAACC,KAAP,CAAaC,SAAb,CAAL,EAA8BR,IAAI,CAACQ,SAAL,GAAiBA,SAAjB;AAE9B,UAAMC,KAAK,GAAI;;;;;;;;;;;;MAAf;AAaA,UAAMC,IAAI,GAAG,MAAMC,aAAa,CAACF,KAAD,EAAQT,IAAR,EAAcD,SAAd,CAAhC;AACA,WAAOW,IAAP;AACD;;AAEDE,aAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,UAAMC,KAAK,GAAGC,KAAK,CAACC,WAAN,GAAoBD,KAAK,CAACC,WAAN,CAAkBC,WAAtC,GAAoD,IAAlE;AACA,WAAOF,KAAK,CAACC,WAAb;AACA,SAAKE,KAAL,GAAa;AAAEJ;AAAF,KAAb;AACD;;AAEDK,mBAAiB,GAAG;AAClB,UAAM;AAAEL;AAAF,QAAY,KAAKI,KAAvB;AAED;;AArCuC,C","file":"server.3ac9afc8b9006ddd54a6.hot-update.js","sourcesContent":["import React from 'react';\nimport { Panel, Table } from 'react-bootstrap';\n\nimport IssueFilter from './IssueFilter';\n\nconst statuses = ['New', 'Assigned', 'Fixed', 'Closed'];\n\nclass IssueReport extends React.Component {\n  static async  fetchData(match, search, showError) {\n    const vars = { };\n    if (params.get('status')) vars.status = params.get('status');\n\n    const effortMin = parseInt(params.get('effortMin'), 10);\n    if (!Number.isNaN(effortMin)) vars.effortMin = effortMin;\n    const effortMax = parseInt(params.get('effortMax'), 10);\n    if (!Number.isNaN(effortMax)) vars.effortMax = effortMax;\n\n    const query = `query issueList(\n      $status: StatusType\n      $effortMin: Int\n      $effortMax: Int\n      ) {\n      issueCounts(\n        status: $status\n        effortMin: $effortMin\n        effortMax: $effortMax\n        ) {\n        owner New Assigned Fixed Closed\n      }\n    }`;\n    const data = await _graphQLFetch(query, vars, showError);\n    return data;\n  }\n\n  constructor(props) {\n    super(props);\n    const stats = store.initialData ? store.initialData.issueCounts : null;\n    delete store.initialData;\n    this.state = { stats };\n  }\n\n  componentDidMount() {\n    const { stats } = this.state;\n    \n  }\n}\n"],"sourceRoot":""}