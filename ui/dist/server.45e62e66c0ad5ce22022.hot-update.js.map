{"version":3,"sources":["webpack:///./src/IssueDetail.jsx"],"names":["IssueDetail","issue","description"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEe,SAASA,WAAT,CAAqB;AAAEC;AAAF,CAArB,EAA+B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,MAAIA,KAAJ,EAAW;AACT,wBACE,qFACE,qFADF,eAEE,wEAAMA,KAAK,CAACC,WAAZ,CAFF,CADF;AAaD;;AACD,SAAO,IAAP;AACD,C","file":"server.45e62e66c0ad5ce22022.hot-update.js","sourcesContent":["import React from 'react';\n\nexport default function IssueDetail({ issue }){\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     issue: {},\n  //     toastVisible: false,\n  //     toastMessage: ' ',\n  //     toastType: 'info',\n  //   };\n  //   this.showError = this.showError.bind(this);\n  //   this.dismissToast = this.dismissToast.bind(this);\n  // }\n  //\n  // componentDidMount() {\n  //   this.loadData();\n  // }\n  //\n  // componentDidUpdate(prevProps) {\n  //   const { match: { params: { id: prevId } } } = prevProps;\n  //   const { match: { params: { id } } } = this.props;\n  //   if (prevId !== id) {\n  //     this.loadData();\n  //   }\n  // }\n  //\n  // showError(message) {\n  //   this.setState({\n  //     toastVisible: true, toastMessage: message, toastType: 'danger',\n  //   });\n  // }\n  //\n  // dismissToast() {\n  //   this.setState({ toastVisible: false });\n  // }\n  //\n  // async loadData() {\n  //   const { match: { params: { id } } } = this.props;\n  //   const query = `query issue($id: Int!) {\n  //     issue (id: $id) {\n  //       id description\n  //     }\n  //   }`;\n  //   const data = await graphQLFetch(query, { id: parseInt(id, 10) }, this.showError);\n  //   if (data) {\n  //     this.setState({ issue: data.issue });\n  //   } else {\n  //     this.setState({ issue: {} });\n  //   }\n  // }\n\n  // render() {\n  //   const { issue: { description } } = this.state;\n  //   const { toastVisible, toastType, toastMessage } = this.state;\n  if (issue) {\n    return (\n      <div>\n        <h3>Description</h3>\n        <pre>{issue.description}</pre>\n        {/*<Toast*/}\n        {/*  showing={toastVisible}*/}\n        {/*  onDismiss={this.dismissToast}*/}\n        {/*  bsStyle={toastType}*/}\n        {/*>*/}\n        {/*  {toastMessage}*/}\n        {/*</Toast>*/}\n      </div>\n    );\n  }\n  return null;\n}\n"],"sourceRoot":""}