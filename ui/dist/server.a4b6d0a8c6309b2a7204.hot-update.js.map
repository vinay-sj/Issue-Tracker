{"version":3,"sources":["webpack:///./src/graphQLFetch.js"],"names":["dateRegex","RegExp","jsonDateReviver","key","value","test","Date","graphQLFetch","query","variables","showError","apiEndpoint","__isBrowser__","window","ENV","UI_API_ENDPOINT","process","env","UI_SERVER_API_ENDPOINT","response","fetch","method","headers","body","JSON","stringify","text","result","parse","errors","error","extensions","code","details","exception","join","message","data","e"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA,MAAMA,SAAS,GAAG,IAAIC,MAAJ,CAAW,6BAAX,CAAlB;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqC;AACnC,MAAIJ,SAAS,CAACK,IAAV,CAAeD,KAAf,CAAJ,EAA2B,OAAO,IAAIE,IAAJ,CAASF,KAAT,CAAP;AAC3B,SAAOA,KAAP;AACD;;AAEc,eAAeG,YAAf,CAA4BC,KAA5B,EAAmCC,SAAS,GAAG,EAA/C,EAAmDC,SAAS,GAAG,IAA/D,EAAqE;AAClF,QAAMC,WAAW,GAAIC,aAAD,GAAgB;AAChCC,QAAM,CAACC,GAAP,CAAWC,eADK,GAEhBC,OAAO,CAACC,GAAR,CAAYC,sBAFhB;;AAGA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,WAAD,EAAc;AACxCU,YAAM,EAAE,MADgC;AAExCC,aAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF+B;AAGxCC,UAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEjB,aAAF;AAASC;AAAT,OAAf;AAHkC,KAAd,CAA5B;AAKA,UAAMc,IAAI,GAAG,MAAMJ,QAAQ,CAACO,IAAT,EAAnB;AACA,UAAMC,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,IAAX,EAAiBrB,eAAjB,CAAf;;AACA,QAAIyB,MAAM,CAACE,MAAX,EAAmB;AACjB,YAAMC,KAAK,GAAGH,MAAM,CAACE,MAAP,CAAc,CAAd,CAAd;;AACA,UAAIC,KAAK,CAACC,UAAN,CAAiBC,IAAjB,KAA0B,gBAA9B,EAAgD;AAC9C,cAAMC,OAAO,GAAGH,KAAK,CAACC,UAAN,CAAiBG,SAAjB,CAA2BL,MAA3B,CAAkCM,IAAlC,CAAuC,KAAvC,CAAhB;AACA,YAAIzB,SAAJ,EAAeA,SAAS,CAAE,GAAEoB,KAAK,CAACM,OAAQ,OAAMH,OAAQ,EAAhC,CAAT;AAChB,OAHD,MAGO,IAAIvB,SAAJ,EAAe;AACpBA,iBAAS,CAAE,GAAEoB,KAAK,CAACC,UAAN,CAAiBC,IAAK,KAAIF,KAAK,CAACM,OAAQ,EAA5C,CAAT;AACD;AACF;;AACD,WAAOT,MAAM,CAACU,IAAd;AACD,GAlBD,CAkBE,OAAOC,CAAP,EAAU;AACV,QAAI5B,SAAJ,EAAeA,SAAS,CAAE,oCAAmC4B,CAAC,CAACF,OAAQ,EAA/C,CAAT;AACf,WAAO,IAAP;AACD;AACF,C","file":"server.a4b6d0a8c6309b2a7204.hot-update.js","sourcesContent":["const dateRegex = new RegExp('^\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d');\n\nfunction jsonDateReviver(key, value) {\n  if (dateRegex.test(value)) return new Date(value);\n  return value;\n}\n\nexport default async function graphQLFetch(query, variables = {}, showError = null) {\n  const apiEndpoint = (__isBrowser__) // eslint-disable-line no-undef\n    ? window.ENV.UI_API_ENDPOINT\n    : process.env.UI_SERVER_API_ENDPOINT;\n  try {\n    const response = await fetch(apiEndpoint, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ query, variables }),\n    });\n    const body = await response.text();\n    const result = JSON.parse(body, jsonDateReviver);\n    if (result.errors) {\n      const error = result.errors[0];\n      if (error.extensions.code === 'BAD_USER_INPUT') {\n        const details = error.extensions.exception.errors.join('\\n ');\n        if (showError) showError(`${error.message}:\\n ${details}`);\n      } else if (showError) {\n        showError(`${error.extensions.code}: ${error.message}`);\n      }\n    }\n    return result.data;\n  } catch (e) {\n    if (showError) showError(`Error in sending data to server: ${e.message}`);\n    return null;\n  }\n}\n"],"sourceRoot":""}